---
title: 'Regular Expressions (Regex)'
jupyter: python3
---


Regular expressions allow for powerful pattern matching within strings. Python's `re` module provides regex functionality.

### Regex Reference

Here's a quick reference of common regex patterns:

| Pattern     | Description                           |
|-------------|---------------------------------------|
| `\d`        | Digit (0-9)                          |
| `\w`        | Word character (a-z, A-Z, 0-9, _)    |
| `\s`        | Whitespace                           |
| `\b`        | Word boundary                        |
| `[abc]`     | Any character in brackets            |
| `[^abc]`    | Any character not in brackets        |
| `a*`        | Zero or more 'a'                     |
| `a+`        | One or more 'a'                      |
| `a?`        | Zero or one 'a'                      |
| `a{3}`      | Exactly 3 'a'                        |
| `a{2,4}`    | 2 to 4 'a'                           |
| `()`        | Capture group                        |
| `a|b`       | Match 'a' or 'b'                     |

For the full regex documentation, see the [Python Regex Documentation](https://docs.python.org/3/library/re.html) and try out patterns at [Regex101](https://regex101.com/) - an interactive regex tester.

```{python}
import re

# Basic pattern matching
text = "The rainfall was 25.5 mm on Monday and 32.7 mm on Tuesday."

# Find all numbers (including decimals)
# \d+ matches one or more digits
# \.? matches an optional decimal point
# \d* matches zero or more digits after the decimal point
numbers = re.findall(r'\d+\.?\d*', text)
print("Numbers found:", numbers)

# Find all words that start with capital letters
# \b is a word boundary
# [A-Z] matches any capital letter
# [a-z]* matches zero or more lowercase letters
# \b is another word boundary to end the word
capitals = re.findall(r'\b[A-Z][a-z]*\b', text)
print("Capitalized words:", capitals)
```

Regex are easy to get wrong, so it's good to write little test cases where you know what the answer should be to make sure your code is working correctly:

```{python}
testtext = "Here are Some words some Start With capital letters"
capitals = re.findall(r'\b[A-Z][a-z]*\b', testtext)
assert capitals == ["Here", "Some", "Start", "With"], "Error your output should have been " + str(capitals)
```

### Regex Patterns and Methods

Let's explore more regex functionality with practical examples. The `re` module provides several key functions:

- `re.search()`: Finds the first match of a pattern
- `re.findall()`: Finds all non-overlapping matches
- `re.sub()`: Substitutes matching patterns with a replacement
- `re.compile()`: Compiles a regex pattern for reuse
- `re.finditer()`: Returns an iterator of match objects

See [Python's re module documentation](https://docs.python.org/3/library/re.html#module-contents) for more details.

```{python}
# Common regex functions: search, match, findall, sub

# Email pattern explanation:
# [\w\.-]+ - one or more word characters, dots, or hyphens (username)
# @ - literal @ symbol
# [\w\.-]+ - one or more word characters, dots, or hyphens (domain name)
# \. - literal dot
# [a-zA-Z]{2,} - two or more letters (top-level domain)
email_pattern = r'[\w\.-]+@[\w\.-]+\.[a-zA-Z]{2,}'
text = "Contact us at info@example.com or support@company.co.uk for assistance."

# search finds first match
match = re.search(email_pattern, text)
if match:
    print(f"First email found: {match.group()} at position {match.start()}")

# findall gets all matches
emails = re.findall(email_pattern, text)
print(f"All emails: {emails}")

# sub replaces matches
redacted = re.sub(email_pattern, "[EMAIL REDACTED]", text)
print(f"Redacted text: {redacted}")

# Capturing groups with ()
date_text = "Important dates: 2023-04-15, 2023-05-22, and 2023-06-30."

# Date pattern breakdown:
# (\d{4}) - capturing group for 4 digits (year)
# - - literal hyphen
# (\d{2}) - capturing group for 2 digits (month)
# - - literal hyphen
# (\d{2}) - capturing group for 2 digits (day)
date_pattern = r'(\d{4})-(\d{2})-(\d{2})'

for match in re.finditer(date_pattern, date_text):
    print(f"Full date: {match.group(0)}")
    print(f"  Year: {match.group(1)}")
    print(f"  Month: {match.group(2)}")
    print(f"  Day: {match.group(3)}")
```

### Practical Example: Data Extraction

**Problem Statement**: We need to extract error messages from a log file and analyze the frequency of different log types.

**Approach**:
1. Define regex patterns to match log entries
2. Use capturing groups to extract relevant information (timestamp, message)
3. Analyze the extracted data

```{python}
log_data = """
2023-06-15 08:24:32 INFO Server started successfully
2023-06-15 08:25:47 WARNING Disk space at 85%
2023-06-15 08:30:15 ERROR Failed to connect to database: timeout
2023-06-15 08:35:22 INFO User admin logged in
2023-06-15 08:40:13 ERROR Authentication failed for user guest
"""

# Extract error messages
# Pattern breakdown:
# (\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}) - capture the timestamp
# ERROR - match the ERROR log level
# (.*) - capture the rest of the line (the error message)
error_pattern = r'(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}) ERROR (.*)'
errors = re.findall(error_pattern, log_data)

print("Error log entries:")
for timestamp, message in errors:
    print(f"[{timestamp}] {message}")

# Count log types
# Pattern breakdown:
# space followed by INFO, WARNING, or ERROR
log_types = re.findall(r' (INFO|WARNING|ERROR) ', log_data)
print("\nLog type counts:")
for log_type in set(log_types):
    count = log_types.count(log_type)
    print(f"{log_type}: {count}")
```
